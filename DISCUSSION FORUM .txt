 SOLUTIONS TO THE DISCUSSION FORUM ASSIGNMENT

EXAMPLE ONE
def function(x): #x is param
    print(x)
    print(x)
    print(x)


t1 = 1
function(9 - 1)
function('rufus')
function(1)


def fun_2():
    loc = 228


# fun_2() if you run this code,
#print(loc)  there will be an error, since the variable is local
def func_3(unical_param):
    print('really unical')


func_3(1000)
#print(unical_param) if you run this code,there will be NameError
t1 = 7
def fun_4(t1):
    print(t1)
#variable inside a function and a variable with the same name outside
# of it are two different variables
# and their values do not overlap or replace
fun_4(t1)

#EXAMPLE 2
def f(n):
    return print(n ** 2)


f(5)
num = 2
f(num)
f(1000 - 7)

#EXAMPLE 3
#Create a function with a local variable.
def add(number1,number2):
    #(1) a local variable. 
    sumResult=number1+number2
    return sumResult
#(2)use the same variable outside the function. 
sumResult=45
print(f"sumResult={sumResult}")


def main():
    print(f"5+6= {add(5,6)}")
    
main()
    
#Output:
#sumResult=45
#5+6= 11

#a local variable inside a function (1) and a variable
#outside the function (2) are two different variables.
#The values of these variables don't overlap each other.

#EXAMPLE 4
def func(a):
    print(a)
a = 8
func(a)
#Using parameters outside the function works well without producing any error. 
#For example the func function will just output 8 without producing any error.

#EXAMPLE 5
def my_func():
    var = 20  # inner variable
    return var

var = 10  # outer variable
print(var)
print(my_func())
print(var)

Output:
10
20
10

Any change of inner variable var will not affect outer variable var and vice versa
